<!DOCTYPE html>
<html lang="en">
<head>
    <%- include('../partials/head'); %>
</head>
<body>
    
    <header>
        <%- include('../partials/header'); %>
    </header>

    <section id="padsm">
        <h1>Wormlike chain model for PCE superplasticizers!</h1>
    </section>

        

        <div class="container">
            <h5>Input the parameter values:</h5>
            <div class="row">
                <div class="col-5">
                    <form id="inputs">

                        <label for="L_bb"> $$ L_{bb} $$ </label>
                        <input name="L_bb" id="L_bb" type="number" value="100" step="0.01" style='width:5em'>
                        <label for="L_bb"> nm (contour length of the backbone)</label>
                        <br>
                        <label for="l_bb"> $$ l_{bb} $$ </label>
                        <input name="l_bb" id="l_bb" type="number" value="5" step="0.01" style='width:5em'>
                        <label for="l_bb"> nm (persistence length of the backbone)</label>
                        <br>
                        <label for="L_a"> $$ L_{a} $$ </label>
                        <input name="L_a" id="L_a" type="number" value="50" step="0.01" style='width:5em'>
                        <label for="L_a"> nm (contour length of a side chain)</label>
                        <br>
                        <label for="l_a"> $$ l_{a} $$ </label>
                        <input name="l_a" id="l_a" type="number" value="0.5" step="0.01" style='width:5em'>
                        <label for="l_a"> nm (persistence length of a side chain)</label>
                        <br>
                        <label for="n"> $$ n $$ </label>
                        <input name="n" id="n" type="number" value="20" step="1" style='width:5em'>
                        <label for="n"> (number of side chains)</label>
                        <br>
                        <button type="button" id="Calculate" onclick="compute()"> Calculate </button>
                        <button type="button" id="removeData" onclick="deleterow()"> Remove data </button>
                
                    </form>
                </div>

                <div class="col-7">
                    <div id="curve_chart" style="width: 700px; height: 700px"></div>
                </div>

                </div>

                <div class="row">
                    <table class="table table-bordered" id="out_table">
                        <thead>
                          <tr>
                            <th scope="col">#</th>
                            <th scope="col">$$\langle S^2 \rangle$$</th>
                            <th scope="col">$$ L_{bb} \mathrm{[nm]}$$</th>
                            <th scope="col">$$ l_{bb} \mathrm{[nm]}$$</th>
                            <th scope="col">$$ L_{a} \mathrm{[nm]}$$</th>
                            <th scope="col">$$ l_{a} \mathrm{[nm]}$$</th>
                            <th scope="col">$$ n $$</th>
                          </tr>
                        </thead>
                        <tbody>
                        </tbody>
                      </table>
                </div>
                
            </div>

        <script>
            var rowNum = [1];
            var arrS = [];
            var arrN = [];

            function compute() {
                var Lbb = Number(document.getElementById("L_bb").value);
                var lbb = Number(document.getElementById("l_bb").value);
                var La = Number(document.getElementById("L_a").value);
                var la = Number(document.getElementById("l_a").value);
                var n = Number(document.getElementById("n").value);

                var LT = function () {
                    return Lbb + n*La
                };

                var na = function () {
                    return La/la
                };

                var nbb = function () {
                    return Lbb/lbb
                };

                var nc = function () {
                    return nbb()/(n+1)
                };

                var tildeS_s1 = function() {
                    return 1 - (3/na()) + (6/(na()**2)) - (6/(na()**3))*(1-Math.exp(-na())) 
                };

                var tildeS_s2 = function() {
                    return 3*(LT()/La-1)*(1-(2/na())+(2/(na()**2))*(1-Math.exp(-na())))
                };
                
                var S_s = function() {
                    return (tildeS_s1() + tildeS_s2())*((La/LT())**2)*((La*la/3)*n)  
                };

                var tildeS_m1 = function() {
                    return 1 - (3/nbb()) + (6/(nbb()**2)) - (6/(nbb()**3))*(1-Math.exp(-nbb())) 
                };
                
                var tildeS_m2 = function() {
                    return 3*n*La/Lbb*(((2*n+1)/(3*(n+1))) - 2/nbb() + 4/(nbb()**2) - ((4*Math.exp(-nc()))/(nbb()**2*n))*((1-Math.exp(-nc()*n))/(1-Math.exp(-nc()))))
                };

                var tildeS_m3 = function() {
                    return (La/Lbb)**2*((1-3/nbb())*(n-1)*n+((6*Math.exp(-nc()))/(nbb()*(1-Math.exp(-nc()))))*(n-(1-Math.exp(-nc()*n))/(1-Math.exp(-nc()))))
                };

                var S_m = function() {
                    return (tildeS_m1() + tildeS_m2() + tildeS_m3())*(Lbb/LT())**2*(Lbb*lbb)/3
                };

                var S = function() {
                    return S_m() + S_s()
                };

                addRow('out_table', S(), Lbb, lbb, La, la, n);
                arrS.push(S());
                arrN.push(n);

                plotData(arrN, arrS);
            }

            function addRow(tableID, a, b, c, d, e, f) {
                // Get a reference to the table
                let tableRef = document.getElementById(tableID);

                // Insert a row at the end of the table
                let newRow = tableRef.insertRow(-1);

                // Insert a cell in the row at index 0
                let newCell0 = newRow.insertCell(0);
                let newCell1 = newRow.insertCell(1);
                let newCell2 = newRow.insertCell(2);
                let newCell3 = newRow.insertCell(3);
                let newCell4 = newRow.insertCell(4);
                let newCell5 = newRow.insertCell(5);
                let newCell6 = newRow.insertCell(6);

                // Append a text node to the cell
                var lastElement = rowNum.pop();
                let newText0 = document.createTextNode(lastElement);
                rowNum.push(lastElement+1);
                let newText1 = document.createTextNode(a);
                let newText2 = document.createTextNode(b);
                let newText3 = document.createTextNode(c);
                let newText4 = document.createTextNode(d);
                let newText5 = document.createTextNode(e);
                let newText6 = document.createTextNode(f);

                newCell0.appendChild(newText0);
                newCell1.appendChild(newText1);
                newCell2.appendChild(newText2);
                newCell3.appendChild(newText3);
                newCell4.appendChild(newText4);
                newCell5.appendChild(newText5);
                newCell6.appendChild(newText6);
            }

            function deleterow() {
                var table = document.getElementById('out_table');
                if (table.rows.length == 1){
                    alert('No data to remove');
                } else {
                    table.deleteRow(-1);
                    var lastElement = rowNum.pop();
                    if (lastElement==1){
                        rowNum.push(1)
                    } else {
                        rowNum.push(lastElement-1);
                    };
                    arrS.pop();
                    arrN.pop();
                    plotData(arrN, arrS);
                }
                
            }

            function plotData(harr, varr) {
                google.charts.load('current', {'packages':['corechart']});
                google.charts.setOnLoadCallback(drawChart);

                var listOfArr = [['n', 'Radius of Gyration in Dilute Solution']];
                for (var i = 0; i < harr.length; i++) {
                    listOfArr.push([harr[i], varr[i]]);
                };

                function drawChart() {
                    var data = google.visualization.arrayToDataTable(listOfArr);

                    var options = {
                        curveType: 'function',
                        vAxis: {title: '<S^2>'},
                        hAxis: {title: 'n'}
                    };

                    var chart = new google.visualization.LineChart(document.getElementById('curve_chart'));

                    chart.draw(data, options);
                }
            }
        </script>
    </div>

    <!-- <footer id="centering">
        <%- include('../partials/footer'); %>
    </footer> -->
</body>
</html>